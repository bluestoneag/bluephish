{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BluePhish Open-Source Phishing Toolkit (Direct Fork of GoPhish ) tbd.","title":"Home"},{"location":"#bluephish","text":"Open-Source Phishing Toolkit (Direct Fork of GoPhish ) tbd.","title":"BluePhish"},{"location":"api/introduction/","text":"Introduction Gophish was built from the ground-up with a JSON API that makes it easy for developers and sysadmins to automate simulated phishing campaigns. These docs describe how to use the BluePhish API. We hope you enjoy these docs, and please don't hesitate to file an issue if you see anything missing. Is Python your language of choice? If so, GoPhish has a fully-supported Python API client that makes working with the BluePhish API a piece of cake! Use Cases There are many reasons to use the BluePhish API. The most common use case is to gather report information for a given campaign, so that you can build custom reports in software you're most familiar with, such as Excel or Numbers. However, automating the creation of campaigns and campaign attributes such as templates, landing pages, and more provides the ability to create a fully automated phishing simulation program. This would allow campaigns to be run throughout the year automatically. This also allows the BluePhish administrator to be included in the campaigns, since they wouldn't know exactly which day it would start! Authorization All API requests require the use of a generated API key. You can find your API key, or generate a new one, by navigating to the /settings endpoint, or clicking the \u201cSettings\u201d sidebar item. To authenticate an API request, you should provide your API key in the Authorization header. Alternatively, you may append the api_key=[API_KEY] as a GET parameter to authorize yourself to the API. But note that this is likely to leave traces in things like your history, if accessing the API through a browser. GET /api/campaigns/?api_key=12345678901234567890123456789012 Parameter Type Description api_key string Required . Your Gophish API key Responses Many API endpoints return the JSON representation of the resources created or edited. However, if an invalid request is submitted, or some other error occurs, Gophish returns a JSON response in the following format: { \"message\" : string, \"success\" : bool, \"data\" : string } The message attribute contains a message commonly used to indicate errors or, in the case of deleting a resource, success that the resource was properly deleted. The success attribute describes if the transaction was successful or not. The data attribute contains any other metadata associated with the response. This will be an escaped string containing JSON data. Status Codes Gophish returns the following status codes in its API: Status Code Description 200 OK 201 CREATED 400 BAD REQUEST 404 NOT FOUND 500 INTERNAL SERVER ERROR","title":"Introduction"},{"location":"api/introduction/#introduction","text":"Gophish was built from the ground-up with a JSON API that makes it easy for developers and sysadmins to automate simulated phishing campaigns. These docs describe how to use the BluePhish API. We hope you enjoy these docs, and please don't hesitate to file an issue if you see anything missing. Is Python your language of choice? If so, GoPhish has a fully-supported Python API client that makes working with the BluePhish API a piece of cake!","title":"Introduction"},{"location":"api/introduction/#use-cases","text":"There are many reasons to use the BluePhish API. The most common use case is to gather report information for a given campaign, so that you can build custom reports in software you're most familiar with, such as Excel or Numbers. However, automating the creation of campaigns and campaign attributes such as templates, landing pages, and more provides the ability to create a fully automated phishing simulation program. This would allow campaigns to be run throughout the year automatically. This also allows the BluePhish administrator to be included in the campaigns, since they wouldn't know exactly which day it would start!","title":"Use Cases"},{"location":"api/introduction/#authorization","text":"All API requests require the use of a generated API key. You can find your API key, or generate a new one, by navigating to the /settings endpoint, or clicking the \u201cSettings\u201d sidebar item. To authenticate an API request, you should provide your API key in the Authorization header. Alternatively, you may append the api_key=[API_KEY] as a GET parameter to authorize yourself to the API. But note that this is likely to leave traces in things like your history, if accessing the API through a browser. GET /api/campaigns/?api_key=12345678901234567890123456789012 Parameter Type Description api_key string Required . Your Gophish API key","title":"Authorization"},{"location":"api/introduction/#responses","text":"Many API endpoints return the JSON representation of the resources created or edited. However, if an invalid request is submitted, or some other error occurs, Gophish returns a JSON response in the following format: { \"message\" : string, \"success\" : bool, \"data\" : string } The message attribute contains a message commonly used to indicate errors or, in the case of deleting a resource, success that the resource was properly deleted. The success attribute describes if the transaction was successful or not. The data attribute contains any other metadata associated with the response. This will be an escaped string containing JSON data.","title":"Responses"},{"location":"api/introduction/#status-codes","text":"Gophish returns the following status codes in its API: Status Code Description 200 OK 201 CREATED 400 BAD REQUEST 404 NOT FOUND 500 INTERNAL SERVER ERROR","title":"Status Codes"},{"location":"api/settings/","text":"Settings ???+ example \"Reset API Key\" This endpoint allows you to reset your API key to a new, randomly generated key. | Method | Host | Path | | :--- | :--- | :--- | | POST | https://localhost:3333 | /api/reset | This method requires you to authenticate using your existing API key. **Parameters** *Header* | Name | Type | Required | | :--- | :--- | :--- | | Authorization | string | true | The existing API key. **Responses** | Code | Note | | 200 | API key successfully reset. The new API key is provided in the data response parameter. | API key successfully reset. The new API key is provided in the `data` response parameter. ```javascript { \"success\": true, \"message\": \"API Key successfully reset!\", \"data\": \"0123456789abcdef\" } ```","title":"Settings"},{"location":"api/settings/#settings","text":"???+ example \"Reset API Key\" This endpoint allows you to reset your API key to a new, randomly generated key. | Method | Host | Path | | :--- | :--- | :--- | | POST | https://localhost:3333 | /api/reset | This method requires you to authenticate using your existing API key. **Parameters** *Header* | Name | Type | Required | | :--- | :--- | :--- | | Authorization | string | true | The existing API key. **Responses** | Code | Note | | 200 | API key successfully reset. The new API key is provided in the data response parameter. | API key successfully reset. The new API key is provided in the `data` response parameter. ```javascript { \"success\": true, \"message\": \"API Key successfully reset!\", \"data\": \"0123456789abcdef\" } ```","title":"Settings"},{"location":"deployment/docker/","text":"Docker Deployment tbd.","title":"Docker"},{"location":"deployment/docker/#docker-deployment","text":"tbd.","title":"Docker Deployment"},{"location":"deployment/kubernetes/","text":"Kubernetes Deployment tbd.","title":"Kubernetes"},{"location":"deployment/kubernetes/#kubernetes-deployment","text":"tbd.","title":"Kubernetes Deployment"}]}